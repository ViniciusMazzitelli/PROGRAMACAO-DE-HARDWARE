
TP_SCHINA_173997.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000100  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000ac  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000100  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000130  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  00000170  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000700  00000000  00000000  000001b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000061e  00000000  00000000  000008b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000214  00000000  00000000  00000ece  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  000010e4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000033c  00000000  00000000  00001108  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000010  00000000  00000000  00001444  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 51 00 	call	0xa2	; 0xa2 <main>
  78:	0c 94 54 00 	jmp	0xa8	; 0xa8 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <tarefa>:
 .global tarefa
 tarefa: 

 INICIO:
      
ldi r16, 0b00000000 
  80:	00 e0       	ldi	r16, 0x00	; 0
out DDRB, r16 
  82:	04 bd       	out	0x24, r16	; 36
ldi r16, 0b11111111  
  84:	0f ef       	ldi	r16, 0xFF	; 255
out DDRC, r16 
  86:	07 bd       	out	0x27, r16	; 39
ldi r16, 0b00000000
  88:	00 e0       	ldi	r16, 0x00	; 0
out DDRD, r16 
  8a:	0a bd       	out	0x2a, r16	; 42

ldi r16, 0b00001111
  8c:	0f e0       	ldi	r16, 0x0F	; 15
out PORTB, r16
  8e:	05 bd       	out	0x25, r16	; 37
ldi r16, 0b11110000
  90:	00 ef       	ldi	r16, 0xF0	; 240
out PORTC, r16
  92:	08 bd       	out	0x28, r16	; 40
ldi r16, 0b11110000
  94:	00 ef       	ldi	r16, 0xF0	; 240
out PORTD, r16
  96:	0b bd       	out	0x2b, r16	; 43

00000098 <LOOP>:
 
LOOP:
      
ldi r16, 0b11110000
  98:	00 ef       	ldi	r16, 0xF0	; 240
out PORTD, r16
  9a:	0b bd       	out	0x2b, r16	; 43
ldi r16, 0b00001111
  9c:	0f e0       	ldi	r16, 0x0F	; 15
out PORTD, r16
  9e:	0b bd       	out	0x2b, r16	; 43
   rjmp LOOP                
  a0:	fb cf       	rjmp	.-10     	; 0x98 <LOOP>

000000a2 <main>:
int main(void)
{
    /* Replace with your application code */
    while (1) 
    {
		tarefa();
  a2:	0e 94 40 00 	call	0x80	; 0x80 <tarefa>
  a6:	fd cf       	rjmp	.-6      	; 0xa2 <main>

000000a8 <_exit>:
  a8:	f8 94       	cli

000000aa <__stop_program>:
  aa:	ff cf       	rjmp	.-2      	; 0xaa <__stop_program>
